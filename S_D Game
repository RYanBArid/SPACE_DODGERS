import pygame
import time
import random
import os

pygame.font.init()

WIDTH, HEIGHT = 1000, 800
WIN = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption('SPACE DODGERS')

desktop = os.path.join(os.path.expanduser('~'), 'Desktop')
BG = pygame.transform.scale(pygame.image.load(os.path.join(desktop, 'BG.jpeg')), (WIDTH, HEIGHT))

PLAYER_WIDTH = 40
PLAYER_HEIGHT = 60
PLAYER_VEL = 10
STAR_WIDTH = 10
STAR_HEIGHT = 20
INITIAL_STAR_VEL = 10
MAX_STAR_VEL = 20  # Define maximum star velocity
FONT = pygame.font.SysFont('comicsans', 30)

def draw(player, elapsed_time, stars, star_vel, points):
    WIN.blit(BG, (0, 0))
    
    # Render texts for time, speed, and points
    time_text = FONT.render(f'Time: {round(elapsed_time)}s', 1, 'white')
    speed_text = FONT.render(f'Speed: {star_vel}', 1, 'white')
    points_text = FONT.render(f'Points: {points}', 1, 'white')
    
    # Display the texts
    WIN.blit(time_text, (10, 10))
    WIN.blit(speed_text, (10, 50))
    WIN.blit(points_text, (10, 90))
    
    # Draw the player and stars
    pygame.draw.rect(WIN, 'red', player)
    for star in stars:
        pygame.draw.rect(WIN, 'white', star)

    pygame.display.update()

def draw_lost_screen():
    lost_text = FONT.render('You Lost', 1, 'white')
    restart_text = FONT.render('Click to Restart', 1, 'white')
    WIN.blit(lost_text, (WIDTH / 2 - lost_text.get_width() / 2, HEIGHT / 2 - lost_text.get_height() / 2))
    WIN.blit(restart_text, (WIDTH / 2 - restart_text.get_width() / 2, HEIGHT / 2 + restart_text.get_height()))
    pygame.display.update()

def main():
    run = True
    clock = pygame.time.Clock()
    start_time = time.time()
    elapsed_time = 0
    star_add_increment = 2000
    star_count = 0
    stars = []
    hit = False
    star_vel = INITIAL_STAR_VEL
    points = 0  # Initialize points
    last_points_time = 0  # To track when to add points

    player = pygame.Rect(200, HEIGHT - PLAYER_HEIGHT, PLAYER_WIDTH, PLAYER_HEIGHT)

    while run:
        star_count += clock.tick(60)
        elapsed_time = time.time() - start_time

        # Add more stars over time
        if star_count > star_add_increment:
            for _ in range(3):
                star_x = random.randint(0, WIDTH - STAR_WIDTH)
                star = pygame.Rect(star_x, -STAR_HEIGHT, STAR_WIDTH, STAR_HEIGHT)
                stars.append(star)
            star_add_increment = max(200, star_add_increment - 50)
            star_count = 0

        # Speed up stars over time and add points every 5 seconds
        star_vel = min(INITIAL_STAR_VEL + elapsed_time // 5, MAX_STAR_VEL)  # Cap star velocity at MAX_STAR_VEL
        if elapsed_time // 5 > last_points_time:  # Check if 5 seconds passed since the last point increment
            points += 10  # Add 10 points every 5 seconds
            last_points_time += 1  # Update the time when points were last added

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
                break

        keys = pygame.key.get_pressed()
        if keys[pygame.K_LEFT] and player.x - PLAYER_VEL >= 0:
            player.x -= PLAYER_VEL
        if keys[pygame.K_RIGHT] and player.x + PLAYER_VEL + player.width <= WIDTH:
            player.x += PLAYER_VEL

        for star in stars[:]:
            star.y += star_vel  # Use dynamic star velocity
            if star.y > HEIGHT:
                stars.remove(star)
            elif star.y + star.height >= player.y and star.colliderect(player):
                stars.remove(star)
                hit = True
                break

        if hit:
            draw_lost_screen()
            restart_game()  # Handle the restart after loss
            break

        # Draw everything including points
        draw(player, elapsed_time, stars, star_vel, points)

    pygame.quit()

def restart_game():
    # Wait for the user to click to restart
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                return
            if event.type == pygame.MOUSEBUTTONDOWN:
                main()  # Restart the game
        # Keeps displaying the lost screen until the user clicks
        pygame.display.update()

if __name__ == '__main__':
    main()
